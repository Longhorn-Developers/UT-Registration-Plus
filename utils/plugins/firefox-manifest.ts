import chalk from 'chalk';
import fs from 'fs/promises';
import path from 'path';
import type { Plugin } from 'vite';

interface FirefoxManifestOptions {
    /**
     * Firefox extension ID. For local development, use a temporary ID like:
     * @example
     * ```
     * '{random-string}@temporary.dev' or '{extension-name}@temporary.dev'
     * ```
     * Once published, replace with the actual Firefox extension ID
     */
    geckoId?: string;
    minVersion?: string;
}

/**
 * A Vite plugin to modify the manifest.json file for Firefox-specific settings.
 * This plugin is intended to be used in a build process where the target browser is Firefox.
 * It modifies the manifest.json generated by CRXJS to include Firefox-specific settings and configurations.
 *
 * @param options - Options to customize the Firefox manifest modifications.
 * @returns The Vite plugin object.
 *
 * @example
 * ```ts
 * // vite.config.ts
 * import { firefoxManifest } from './utils/plugins/firefox-manifest';
 *
 * export default {
 *   plugins: [
 *     firefoxManifest({
 *       geckoId: 'your-extension-id@domain.com',
 *       minVersion: '109.0',
 *     }),
 *   ],
 * };
 * ```
 */
export default function firefoxManifestV3(options?: FirefoxManifestOptions): Plugin {
    // Generate a temporary ID if none provided
    const tempId = `utrp-gecko-dev_${Math.random().toString(36).slice(2)}@temporary.dev`;
    const geckoId = options?.geckoId || tempId;

    return {
        name: 'firefox-manifest-modifier',
        enforce: 'post',
        async writeBundle(outputOptions) {
            // Only run for Firefox builds
            if (process.env.BROWSER_TARGET !== 'firefox') return;

            const outDir = outputOptions.dir || 'dist';
            const manifestPath = path.join(outDir, 'manifest.json');

            try {
                console.log(chalk.cyan('\nModifying manifest.json for Firefox...'));

                // Read the manifest generated by CRXJS
                const manifestContent = await fs.readFile(manifestPath, 'utf-8');
                const manifest = JSON.parse(manifestContent);

                // Firefox MV3 modifications
                const firefoxManifest = {
                    ...manifest,
                    // Convert options_page to options_ui
                    ...(manifest.options_page && {
                        options_ui: {
                            page: manifest.options_page,
                            open_in_tab: true,
                        },
                    }),
                    // Add Firefox-specific settings
                    browser_specific_settings: {
                        gecko: {
                            id: geckoId,
                            strict_min_version: options?.minVersion || '109.0',
                        },
                    },
                };

                // Convert background service_worker to scripts array
                if (manifest.background?.service_worker) {
                    firefoxManifest.background = {
                        scripts: [manifest.background.service_worker],
                        type: 'module',
                    };
                }

                // Remove options_page as it's been converted to options_ui
                delete firefoxManifest.options_page;

                // Remove 'background' from permissions if it exists
                if (firefoxManifest.permissions) {
                    firefoxManifest.permissions = firefoxManifest.permissions.filter(
                        (permission: string) => permission !== 'background'
                    );
                }

                // Remove use_dynamic_url from web_accessible_resources
                // It's an array of objects like this
                // {
                //   "matches": [
                //     "*://*/*"
                //   ],
                //   "resources": [
                //     "assets/js/*.js",
                //     "assets/css/*.css",
                //     "assets/img/*"
                //   ],
                //   "use_dynamic_url": false
                // },
                if (firefoxManifest.web_accessible_resources) {
                    firefoxManifest.web_accessible_resources = firefoxManifest.web_accessible_resources.map(
                        (key: { resources: string[]; matches: string[]; use_dynamic_url: boolean }) => ({
                            resources: key.resources,
                            matches: key.matches,
                        })
                    );
                }

                // Write the modified manifest
                await fs.writeFile(manifestPath, JSON.stringify(firefoxManifest, null, 2));

                // Log modifications
                console.log(chalk.green('✓'), 'Modified manifest.json for Firefox:');
                console.log(chalk.dim('  • Converted options_page to options_ui'));
                console.log(chalk.dim('  • Updated background script configuration'));
                console.log(chalk.dim('  • Updated web_accessible_resources'));
                console.log(chalk.dim(`  • Added Firefox ID: ${geckoId}`));
                if (firefoxManifest.permissions) {
                    console.log(chalk.dim('  • Updated permissions'));
                }

                // Add note about temporary ID if using generated one
                if (!options?.geckoId) {
                    console.log(chalk.yellow('\nNote:'), 'Using temporary Firefox extension ID.');
                    console.log(chalk.dim('  For development only. Update with actual ID after publishing.'));
                }
            } catch (error) {
                console.error(chalk.red('\nError modifying manifest for Firefox:'));
                console.error(chalk.dim(error));
                throw error;
            }
        },
    };
}
