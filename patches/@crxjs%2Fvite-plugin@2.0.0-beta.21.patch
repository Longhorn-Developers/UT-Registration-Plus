diff --git a/dist/index.mjs b/dist/index.mjs
index 5c3f6291168987c56b816428080e6f1fe9de7107..5d4297d811e360f490d2e73a6c720c69723a1fcb 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -498,18 +498,45 @@ ${sourceMap}
       return { target, code, deps };
     }),
     mergeMap(async ({ target, code, deps }) => {
-      await lexer.init;
-      const [imports] = lexer.parse(code, fileName);
-      const depSet = new Set(deps);
-      const magic = new MagicString(code);
-      for (const i of imports)
-        if (i.n) {
-          depSet.add(i.n);
-          const fileName2 = getFileName({ type: "module", id: i.n });
-          const fullImport = code.substring(i.s, i.e);
-          magic.overwrite(i.s, i.e, fullImport.replace(i.n, `/${fileName2}`));
+        await lexer.init;
+        const [imports, exports] = lexer.parse(code, fileName);
+        const depSet = new Set(deps);
+        const magic = new MagicString(code);
+        for (const i of imports) {
+            if (i.n) {
+                depSet.add(i.n);
+                const fileName2 = getFileName({ type: "module", id: i.n });
+                const fullImport = code.substring(i.s, i.e);
+                const hmrTimestamp = fullImport.match(/\bt=\d{13}&?\b/);
+                magic.overwrite(
+                    i.s,
+                    i.e,
+                    fullImport.replace(
+                        i.n,
+                        `/${fileName2}${hmrTimestamp ? `?${hmrTimestamp[0]}` : ""}`
+                    )
+                );
+            }
+        }
+        for (const e of exports) {
+            if (e.n === "default") {
+                const regex = /\s+['"](.*)['"]/y;
+                regex.lastIndex = e.e;
+                const fullExport = regex.exec(code)?.[1];
+                if (!fullExport)
+                    continue;
+                const start = regex.lastIndex - fullExport.length - 1;
+                const end = regex.lastIndex - 1;
+                if (fullExport.startsWith("/node_modules")) {
+                    magic.overwrite(
+                        start,
+                        end,
+                        `http://localhost:5173${fullExport}`
+                    );
+                }
+            }
         }
-      return { target, source: magic.toString(), deps: [...depSet] };
+        return { target, source: magic.toString(), deps: [...depSet] };
     })
   );
 }
@@ -1229,6 +1256,9 @@ const pluginHMR = () => {
       handleHotUpdate({ modules, server }) {
         const { root } = server.config;
         const relFiles = /* @__PURE__ */ new Set();
+        function getRelFile(file) {
+            return file.startsWith(root) ? file.slice(server.config.root.length) : file;
+        }
         for (const m of modules)
           if (m.id?.startsWith(root)) {
             relFiles.add(m.id.slice(server.config.root.length));
@@ -1241,12 +1271,20 @@ const pluginHMR = () => {
             return [];
           }
         }
-        for (const [key, script] of contentScripts)
-          if (key === script.id) {
-            if (relFiles.has(script.id) || modules.some(isImporter(join(server.config.root, script.id)))) {
-              relFiles.forEach((relFile) => update(relFile));
+        for (const [key, script] of contentScripts) {
+            if (key === script.id) {
+                if (relFiles.has(script.id) || modules.some(isImporter(join(server.config.root, script.id)))) {
+                    modules.filter((mod) => mod.id?.startsWith(root)).forEach((mod) => {
+                        update(getRelFile(mod.id));
+                        if (mod.file?.endsWith(".scss")) {
+                            mod.importers.forEach((imp) => {
+                                update(getRelFile(imp.id));
+                            });
+                        }
+                    });
+                }
             }
-          }
+        }
       }
     },
     {
@@ -1882,7 +1920,7 @@ const pluginWebAccessibleResources = () => {
         if (contentScripts.size > 0) {
           const viteManifest = parseJsonAsset(
             bundle,
-            "manifest.json"
+            ".vite/manifest.json"
           );
           const viteFiles = /* @__PURE__ */ new Map();
           for (const [, file] of Object.entries(viteManifest))
